{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "edb2cf2a",
   "metadata": {},
   "source": [
    "## Strangeon EOS inference pipeline"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7bc633d3",
   "metadata": {},
   "source": [
    "This is an example notebook about how to use our tools to analysis a observation constraint on strangeon star equation of state.\n",
    "\n",
    "Here in this notebook, we are using a strangeon matter EOS.\n",
    "\n",
    "The following is the package that we need."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f6f20856",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/a9/CompactOject/InferenceWorkflow/Likelihood.py:314: SyntaxWarning: invalid escape sequence '\\('\n",
      "  \"\"\"\n"
     ]
    }
   ],
   "source": [
    "import InferenceWorkflow.BayesianSampler as sampler\n",
    "import InferenceWorkflow.Likelihood as likelihood\n",
    "import InferenceWorkflow.prior as prior\n",
    "import math\n",
    "import numpy as np\n",
    "import EOSgenerators.Strangeon_EOS as Strangeon\n",
    "from TOVsolver.constant import oneoverfm_MeV, m_rho, m_w,G,c\n",
    "import TOVsolver.main as main"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b494a39",
   "metadata": {},
   "source": [
    "The following is the strangeon matter EOS function.\n",
    "\n",
    "We note that because the parameter Nq is an integer in the strangeon matter EOS.\n",
    "\n",
    "In the following, we use a possible value of this parameter, Nq=18, as an example to carry out the Bayesian analysis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c9d879d4",
   "metadata": {},
   "outputs": [],
   "source": [
    "Nq=18\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "edfa0f72",
   "metadata": {},
   "source": [
    "### Set up prior"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38136542",
   "metadata": {},
   "source": [
    "Next step, we need to set up the prior, first use parameters array to specify the variable name, this process should consistent with what you need to call them.\n",
    "\n",
    "Define a prior transform function to define prior. Cube are set of random number from 0 to 1. This prior setting is standard set-up of UltraNest package, since we are using UltraNest to do nest-sampling.\n",
    "\n",
    " We provided two options call from prior:\"normal_Prior\" and \"flat_prior\".\n",
    " \n",
    "Then the Parameters prior should all set.\n",
    "\n",
    "We note that since we are doing Equation of state Inference from mass-radius data of neutron star measurement. The center density of the star should be also sampled. Otherwise will be a partially-defined prior, did not span all parameters space, and proved to be different with full-scope inference.\n",
    "\n",
    "This request as randomly generate a density from a EoS range, however, this process is not that trivial, since we need to determine the upper limit of the central density of compact star --- different equation of state will predict different upper bound, so here we need to use the prior-setting EoS parameters computing the EOS by\n",
    "\n",
    "strangeon.compute_EOS\n",
    "Compute out EOS, put into\n",
    "\n",
    "main.OutputMR\n",
    "\n",
    "find out Mass Radius of this equation of state, then find out the last stable point of this equation of state.(first mass points that give the direvative to be negative)\n",
    "\n",
    "and find out that index by len() function, then reset this max_d to be upper limit of this density range.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2b87dd3b",
   "metadata": {},
   "outputs": [],
   "source": [
    "parameters = [ 'epsilon', 'ns', 'd1']\n",
    "# for two or more MR measurements, define \n",
    "# parameters = ['epsilon', 'ns', 'd1', 'd2'] \n",
    "\n",
    "def prior_transform(cube):\n",
    "    params = cube.copy()\n",
    "    params[0] = prior.flat_prior(10, 170,cube[0])   #epsilon=10-170MeV\n",
    "    params[1] = prior.flat_prior(0.17,0.36,cube[1]) #ns=0.17-0.36fm^-3    \n",
    "    \n",
    "    epsilon = params[0]\n",
    "    ns = params[1]\n",
    "\n",
    "    theta1 = np.array([Nq, epsilon, ns])\n",
    "    n_min = 3 * theta1[2] / theta1[0]  \n",
    "    n_max = 0.16 * 8 * 3 / theta1[0]   \n",
    "    n_values = np.linspace(n_min, n_max, 2000) \n",
    "    energy_density, pressure = Strangeon.compute_EOS(n_values, theta1)\n",
    "    \n",
    "    \n",
    "\n",
    "    eps_total=energy_density\n",
    "    \n",
    "    pres_total=pressure\n",
    "    \n",
    "    RFSU2R = [] \n",
    "    MFSU2R = []\n",
    "    density = np.logspace(14.3, 15.6, 50) \n",
    "    if all(x<y for x,y in zip(eps_total[:], eps_total[1:])) and all(x<y for x, y in zip(pres_total[:], pres_total[1:])):\n",
    "        MR = main.OutputMR('',energy_density,pressure).T  \n",
    "        \n",
    "    else:\n",
    "        MR = []\n",
    "    if len(MR) == False: \n",
    "        params[2] = 0\n",
    "        #params[3] = 0\n",
    "        #this line for showing how to add one more observation\n",
    "    else:\n",
    "   \n",
    "        for i in range(len(MR[0])):\n",
    "            RFSU2R.append(MR[1][i])\n",
    "            MFSU2R.append(MR[0][i])   \n",
    "            if i > 20 and MR[0][i] - MR[0][i-1]< 0:    \n",
    "                break\n",
    "    if len(MFSU2R)==False:\n",
    "        params[2] = 0\n",
    "        #params[3] = 0\n",
    "        #this line for showing how to add one more observation\n",
    "    else:\n",
    "        max_index = len(MFSU2R)\n",
    "        max_d = np.log10(density[max_index-1])\n",
    "        params[2] = 14.3 + (max_d - 14.3) * cube[2]\n",
    "        #params[3] = 14.3 + (max_d - 14.3) * cube[3]\n",
    "        #this line for showing how to add one more observation\n",
    "    return params"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f8e4822",
   "metadata": {},
   "source": [
    "In the upper part, we define a flat (uniform) prior for the parameters in the strangeon matter equation of state, due to the lack of constraints from terrestrial experiments.\n",
    "\n",
    "Note that the above code is an example of Bayesian analysis for a given mass and radius observation measurement.\n",
    "For example, if you use the NICER data for the measurements of J0030, then you should define another parameter, except the strangeon EOS parameters, e.g. \"d1\" for the centre density of this measurement, in the meantime add \"params[2]\" to this code.\n",
    "\n",
    "If you further consider the adjoint analysis with J0030+J0740, then you should define the other two parameters, e.g. \"d1\" and \"d2\" for the centre density of these two measurements, in the meantime add \"params[3]\" to the above code."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "53ab6d43",
   "metadata": {},
   "source": [
    "### Set up likehood"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3bfd12ff",
   "metadata": {},
   "source": [
    "We need to set up a likelihood, Using standard definition way of UltraNest, that is below.\n",
    "\n",
    "Here the likelihood is generated from a simulated mass radius measurement, which is  𝑀=1.4𝑀⊙\n",
    "  and  𝑅=13\n",
    "  km, With a 5% Mass radius measurement uncertainty, \n",
    "  \n",
    " so here\n",
    " \n",
    "      likelihood.MRlikihood_Gaussian\n",
    "      \n",
    "function will be use for our likelihood, please check [likelihood.MRlikihood_Gaussian](https://github.com/ChunHuangPhy/CompactOject/blob/main/InferenceWorkflow/Likelihood.py) to see the original code, and more choice of likelihood. eg:\n",
    "\n",
    "1.If we have some real mass-radius measurements, say PSR J0030 or PSR J0740, come from NICER, a KDE kernel could be trained to feed into\n",
    "\n",
    "likelihood.MRlikihood_kernel(eps_total,pres_total,x,d1)\n",
    "\n",
    "set the KDE kernel as a input for this function\n",
    "\n",
    "2.If we gain measurement from radio-timing, say only measure the neutron star mass, then\n",
    "\n",
    "likelihood.Masslikihood_Gaussian(eps_total,pres_total,x,d1)\n",
    "\n",
    "Which will give the likelihood from single mass measurement, x is the parameters of that measurement, you should specify where this measurement mass is located and what is the sigma width of this mass measurement.\n",
    "\n",
    "3.If we have nuclear measurements, and want to constrain this RMF model by nuclear properties like K(The Incompressibility of nuclear matter),J ( the symmetry energy at saturation density) and L( the slope of symmetry energy at saturation density). You can choose:\n",
    "\n",
    "likelihood.Kliklihood(theta,K_low,K_up)\n",
    "likelihood.Jliklihood(theta,K_low,K_up)\n",
    "likelihood.Lliklihood(theta,K_low,K_up)\n",
    "\n",
    "We are defaulting a hard-cut flat constrain, so if you don't like this default hard cut, also could define the likelihood by youself with similiar style.\n",
    "\n",
    "4.If we have a Tidal measurements from Gravitational wave detector, we can use it to do constraint:\n",
    "\n",
    "likelihood.TidalLikihood_kernel(eps_total,pres_total,x,d1)\n",
    "\n",
    "Where x is sampled distribution from real measurements, the standard is\n",
    "\n",
    "kernel, chrip = x,\n",
    "\n",
    "where the kernel is a whole set sampling from GW event, that is [chrip mass, M2/M1, tidal of M1, tidal of M2] four quantities. Chrip is the single smapling that comes only the chrip mass sampling."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0d3a8359",
   "metadata": {},
   "outputs": [],
   "source": [
    "import scipy.stats as stats\n",
    "\n",
    "\n",
    "def likelihood_transform(theta):\n",
    "    # This is a demonstration code for only introduce one constraint from one mass-radius observation.\n",
    "    # Could be very easy to implement more constraint from nuclear quantity, since that do not need to\n",
    "    # sample more central density of real neutron star. If user want to expand to two mass radius measurement \n",
    "    # the code could be:\n",
    "      \n",
    "    epsilon, ns, d1 = theta \n",
    "    # comment this line if you need two measuremnts.\n",
    "    #epsilon, ns, d1, d2 = theta\n",
    "    \n",
    "    ####################################################################################################################\n",
    "    ############ This is the block to compute out all the EoS you need based on your parameters#########################\n",
    "\n",
    "\n",
    "    theta1 = np.array([Nq, epsilon, ns])\n",
    "    n_min = 3 * theta1[2] / theta1[0]  \n",
    "    n_max = 0.16 * 8 * 3 / theta1[0]   \n",
    "    n_values = np.linspace(n_min, n_max, 2000) \n",
    "    energy_density, pressure = Strangeon.compute_EOS(n_values, theta1)\n",
    "\n",
    "    ####################################################################################################################\n",
    "    \n",
    "    probMRgaussian = likelihood.MRlikihood_Gaussian(energy_density,pressure,(1.4,13,0.07,0.65),d1)\n",
    "    \n",
    "    prob = probMRgaussian\n",
    "    \n",
    "    return prob"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "96d26ce7",
   "metadata": {},
   "source": [
    "In the following, we will show how to modify the likehood_transform function when considering more observations.\n",
    "\n",
    "def likelihood_transform(theta):\n",
    "\n",
    "    Nq, epsilon, ns, d1 = theta \n",
    "    theta = np.array([epsilon, ns]) \n",
    "    n_min = 3 * theta[1] / Nq      #n_min=3*ns/Nq\n",
    "    n_max = 0.16 * 8 * 3 / Nq      #n_max=0.16*8*3/Nq\n",
    "    n_values = np.linspace(n_min, n_max, 100)  # 100 points between n_min and n_max\n",
    "    energy_density_total, pressure_total = Strangeon_compute_EOS(n_values, theta)\n",
    "    \n",
    "    #1. This line is to compute MR likelihood from a Simulated MR measurement:\n",
    "    \n",
    "    probMRgaussian = MRlikihood_Gaussian(energy_density_total,pressure_total,(1.4,13,0.07,0.65),d1)\n",
    "    \n",
    "    #probMRgaussian = likelihood.MRlikihood_Gaussian(energy_density_total,pressure_total,(2.08,13,0.08,0.65),d2)\n",
    "    \n",
    "    #2. This is  a block that constrain from given real MR measurement, say J0030:\n",
    "    \n",
    "    #J0030 = numpy.loadtxt('data/PST_equal_sampled_MR.txt', delimiter=' ')\n",
    "    #J30R_list, J30M_list = zip(*J0030)\n",
    "    #J30R_list = numpy.array(J30R_list).T    \n",
    "    #J30M_list = numpy.array(J30M_list).T\n",
    "    #Rmin = J30R_list.min()\n",
    "    #Rmax = J30R_list.max()\n",
    "    #Mmin = J30M_list.min()\n",
    "    #Mmax = J30M_list.max()\n",
    "    #X3, Y3 = numpy.mgrid[Rmin:Rmax:500j, Mmin:Mmax:100j]\n",
    "    #positions = numpy.vstack([X3.ravel(), Y3.ravel()])\n",
    "    #values = numpy.vstack([J30R_list, J30M_list])\n",
    "    #kernel3 = stats.gaussian_kde(values)\n",
    "    #probMRJ0030 = likelihood.MRlikelihhood_kernel(eps_total,pres_total,kernel3,d1)\n",
    "    \n",
    "    #3. This is to compute the constraint from experiment of nuclearmatter\n",
    "    # 250<K<400, 25<J<38, 30<L<86:\n",
    "    # hint: since this K,J,L sampling don't need to sample central density so this \n",
    "    # theta should be redifined.\n",
    "    #probK = likelihood.Kliklihood(theta,250,400)\n",
    "    #probJ = likelihood.Jliklihood(theta,250,400)\n",
    "    #probL = likelihood.Lliklihood(theta,250,400)\n",
    "    \n",
    "    #4. This is block to cosntrain from a GW event, say GW170817, here the file of this\n",
    "    # event is origanized by [chrip mass, M2/M1, tidal of M1, tidal of M2, sampling weight]:\n",
    "    #GW170817 = np.load('GW170817_McQL1L2weights.npy')\n",
    "    #chrip170817 = stats.gaussian_kde(GW170817[:,0],weights = GW170817[:,4])\n",
    "    #kernelGW = stats.gaussian_kde(GW170817.T[0:4],weights = GW170817[:,4])\n",
    "    #probGW = likelihood.TidalLikihood_kernel(eps_total,pres_total,(kernelGW,chrip170817),d1)\n",
    "    \n",
    "    \n",
    "    prob = probMRgaussian\n",
    "    \n",
    "    #prob =  probGW#+ probMRJ0030 + probK + probJ + probL + probGW\n",
    "    \n",
    "    return prob"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a3802c4",
   "metadata": {},
   "source": [
    "### Set up sampler"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "76bce7fb",
   "metadata": {},
   "source": [
    "Here next, we define sampler, there is two different sampler we provided for. \n",
    "\n",
    "Considering where you need resume file:\n",
    "\n",
    "sampler.UltranestSampler   and  sampler.UltranestSamplerResume\n",
    "\n",
    "Here since it is our first run, so we only use first one. Some of the sampler parameters is requested, first is step number, our choice for UltraNest sampler is slicesampler, which could easily be sliced up your total computation load, and parallelize, speed up sampling. So step as suggested by documentation of UltraNest, we use 2*len(parameters).\n",
    "\n",
    "live_point we set 2000, it will influence the sampling precision, We suggest for 7 dimension space, maybe 5000 is a better choice, however, since my computer only have limited resources, we set 2000.\n",
    "\n",
    "max_calls set 10000, it is how many iteration after it will stop, we suggest to set this number significantly higher, otherwise maybe will broken before the inference converging to a definite value. That result will be un-phyiscal."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f05849a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "step = 2 * len(parameters)\n",
    "live_point = 400\n",
    "\n",
    "max_calls = 60000\n",
    "samples = sampler.UltranestSampler(parameters,likelihood_transform,prior_transform,step,live_point,max_calls)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "240dec67",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
